<?xml version="1.0" encoding="utf-8"?>
<search>
  
    
    <entry>
      <title><![CDATA[Flyingstudio之胡言乱语]]></title>
      <url>%2F2017%2F03%2F26%2Fflyingstudio%E4%B9%8B%E8%83%A1%E8%A8%80%E4%B9%B1%E8%AF%AD%2F</url>
      <content type="text"><![CDATA[seven 写于2017.3.262016年翔工作室负责人任期的最后一天 为什么会选择站长 一个尝试：以前没有做过相关的工作，想挑战下自己。 想以站长的身份来提高影响力来做些事情 最后我想明白，如果真要做什么事情，不需要任何身份的辅助，主要看你的执行力。身份应该是你的描述，而不是束缚或限制 我的收获 学会了很多东西 在工作室，我知道了Web开发，Android开发，产品和运营，以及了解到一些互联网的概念。如果不是在这里，在这种的氛围下，我可能根本没有途径去了解相关的事情 在工作室里，我可以直观的体验到一个互联网团队的运行方式。一群人做着别人无法理解的事情。 一群有趣的人 神奇的程序猿成为一位的大神必须要付出很多：时间和精力，也要放弃很多：玩乐等。不疯魔不成神。立下flag: 成为大神的原因都是差不多的，坚持不下去的原因千花百样 可靠的伙伴在很多时候，是因为有了其他人的支持，我才能坚持下来。一个团队里有各种可靠的伙伴，有一群志同道合的伙伴，真的很好。 真正收获主动的去获取，总比被动的告知好开始行动的效果比空想，原地踏步，害怕好很多，无论最后的结局是怎么样的 期望 或者说我理想的情况 在工作室，认识一些人，做一个好玩的东西 任何人想法能实现，很好的执行和坚持下去 项目的小提示 工作室很大比重是做项目，2016.8-2017.3期间经历了工作室很多项目的生死，说些我的经验 人的因素：一个产品是由人开发的，也是为人服务的 团队：负责项目的开发和以后的维护和升级目前工作室实行项目小组制度，这个小组是固定的，最好是4-5人。每个团队的成员是动态的，团队负责人可以根据个人表现来决定团队成员 稳定的团队和一定的自由度。保证了项目开发的可持续性和减少交流成本，但需要团队内的高度自主性和主动性和很强的执行力 沟通团队内成员要多沟通交流，多组织线下见面的机会。支持一起吃午饭，出去玩等。 如果一起做项目的人相互之间不熟悉，项目很难进展下去。曾经遇到一种情况：项目里的成员都不认识。。不沟通如何迸发火花？ 反馈!!!反馈很重要。如果一个东西(原型，设计图，一小部分功能)做出来以后，大家相互不搭理，没有适时给反馈。最后这个项目的问题会积累到最后，一起爆发 这需要大家主动投入，并有一定的专业性和兴趣 时间问题 开发周期目前工作室的开发周期大概是一个月(我所接触的，了解到的)，但有部分可以更快结束，开发完成的。我的想法是尽量把初始版本的开发时间缩短到2周，多测试，多完善 这需要开发前就要考虑好，哪些功能是必须的，优先开发一部分功能，保证产品可用，并且在2周开发完成 持续时间坚持不是件简单的事情，但是坚持下来后都会有好结果，有份收获一个项目：从最初的想法，再到开始编码，然后到落地完成，接着到迭代更新。经历过这一段的历程后，才会获得一份真正的收获：成就感，技能掌握，学到知识等。而不是一种开发项目的套路感 流程 原型，需求文档提前验证想法，整理思路，存档方便不时回顾 设计文档方便开发，存档方便以后的升级，后期修改维护等 开发文档，项目经验知识整理，方便以后的产品维护和升级，方便传承和交接 资料来源: 工作室coding3.18例会ppt-seven工作室wiki]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[2016，2017]]></title>
      <url>%2F2017%2F01%2F03%2F2017%2F</url>
      <content type="text"><![CDATA[2016年总结及2017年展望 写份总结反思一年的自己，顺便思考 文档建立者 建立时间 最新修改时间 版本号 感觉 Seven 2016.12.21 2016.12.21 13:10 V1.0 Doing ———— ———— 2016.12.22 11:05 V1.1 写的是什么 ———— ———— 2016.12.23 18:33 V1.2 不知道写什么了 ———— ———— 2016.12.24 9:00 V1.3 接近停滞， ———— ———— 2017.1.3 16:20 V2.0 再读感悟 个人总结 回顾一下自己过去一年做了什么, 时间轴 部分时间已经混乱，但是大致的时间还是没有变的 2016.1大一下学期末,之前正在学Android开发，遇到瓶颈，重复学习，了解了Android开发但是没有深入学习，没有知识体系。除此之外,有个后遗症：根本不想为考试学习，刷分，刷题。后面一段时间，忙着考试 2016.2寒假期间，回家了。继续学习Android(比较少),曾经想做个记账App但最后失败。主要忙着家里面的事情，期间看了《SICP》,感悟不少 2016.3回校，Android学习停滞，可以说是没有动力敲代码吧，或者没有意识到自己没有在敲代码吧（刷屏，瞎忙） 2016.4跟着同学申请项目：推荐系统，忙着找论文，写申请报告。期间被告知：当工作室站长 2016.5开始接手工作室事情，征集成员意见，开始做项目,准备大干一场。期间出现了工作室考核成员转正缓慢,混乱的问题，最后平稳度过。5.28筹备了茶话会，我的尴尬癌犯了（不喜欢这种事情） 2016.6花费了一周时间在自管会毕业典礼上，精疲力尽，而且匆忙筹备了暑假培训。最后一段时间忙着考试，但是期间的拖延症特别严重，一个字形容自己“作” 2016.7暑假开始，跟工作室的暑期培训。期间没有回家，准备好好学习。给自己一个借口：迷茫，忙（瞎忙）,拖延症。其实表现就是：没有合理安排时间，低效率，一些事情安排过多时间 2016.8找回一部分状态，开始学习Coursera上的”Machine Learning”,用了Matlab，大概用了1周时间，一个月看完了《CSAPP》, 做了一些项目相关的事情。使用Mahout,LensKit等等 2016.9突然间就开学了，时间过得很快。忙碌自管会开学典礼，迎新，及工作室招新面试还有补考,没有认真思考自己，工作室。 2016.10上个月末，易班强势介入（老师力量，资本力量）,开始了导航矿大的项目，并在月底成功上线，把自己的精力过多放在易班上，其他事务有所忽略 2016.11准备结课考试，闭关了1周左右，把工作室具体事务交给泽龙。个人方面开始折腾服务器，折腾开源软件，主要是使用Bitnami打包平台，开始刷FreeCodeCamp 2016.122016年最后一个月，继续学习Freecodecamp，但是学习相关事情没有认真对待,进入一个焦虑期，或者进入一个作死期吧 阅读书籍SICPCSAPP人月神话人件成为技术领导者人人都是产品经理从零开始做运营程序员修炼之道高效能程序员的修炼程序员思维修炼像程序员一样思考计算机科学概论无处不在的博弈:中国历史文化现象的博弈论共享经济时代游戏化思维程序员的修炼硅谷之谜皮囊精进:如何成为一个很厉害的人 技术栈 方面 掌握程度 Android 了解 Java 了解基本知识，但不会灵活利用 Python 基本语法都没学完 C++ 完全抛弃了 机器学习 只是上了一门课，没有用起来和深入学习 Hadoop 配置过一次环境，没有开发过 服务器运维 只是玩玩而已，根本没认真学 软件开发 根本还没入门 产品知识 Shit 运营方面 什么鬼 前端 正在学习…. 工作总结 不得不承认第二学期的工作，我是有些懈怠的，就是工作与学习相互找借口吧：以工作忙来推脱学习，以学习要紧推脱工作 从上面的个人总结看出来，貌似我大部分时间都用在工作室上了，其实是我低效的表现，各种焦头烂额 工作总结:不多说，更多内容请看:wiki 总结概览 说了很多，做的很少，行动力不强，没有抢占先机，导致我们处处受制于人。 没有把握住度，就是老师与工作室之间的平衡，工作室内部成员之间的平衡，事情优先级的平衡，个人与工作室的平衡 思考 一些胡言乱语的，以及这一年的感受。关键字：浮躁，匠心，幕后工作者，付出与收获 值不值得 首先当初选择当这个站长时，没有想到会有那么多其他事情，个人更加倾向于实现心中的想法：做些好玩的东西。Ps：个人太过乐观及缺失相关敏感度 曾经我天真的认为自己能够处理好自己的事情，工作的事情，所有事情，但最后是焦头烂额，其实是自己的拖延症犯的错 既然选择了这个，就坚持下去，尽量把工作室往自己的理想状态引导，（我想过是不是沉没成本问题，已经确认的是：只是单纯的想把事情做好） 我的理想状态：工作室自增长，这个组织会不断学习，进步，一群人在一起，做些有意义，好玩的事情 最后，没有值不值得之说了，只是把眼前的事情做好，给未来的工作室打下个基础吧。做好自己！ 这一年有什么收获工作室的收获 个人能力的提升:软实力吧，相比以前更容易与别人相处交流；知道了运行一个组织的难处， 知道了自己的缺点：表达能力欠缺，总会出现词不达意的时候;有时候没有主见，容易随波逐流;决策能力差，没有预见性，没能做好风险规避；忘事，不认真。。。 最大收获就是：认识一群有趣的人，在一起做些好玩的东西，在此期间学到了很多东西，也了解到，接触到很多好玩的知识:项目开发，设计，运营，产品 个人收获 （其他时候的感悟） 说很多，想很多，做很少 浮躁，学一个，放弃一个，没有能坚持下来的东西，总以为自己懂很多，其实是什么都不会 只知道硬抗，不会借力，寻找支持 主次不分，分不清轻重缓急，事情没有及时解决， 不够专注，总会忘了时间导致事情拖延 貌似读了很多书，学了很多东西，但没有形成体系及真正使用起来 《精进》：真正学到的知识应该是你能调用的知识 结论 静下心来提升自己的硬实力：技术，技能。”匠心” 专注于眼前的工作，不瞻前顾后也不三心二意 虽然付出了不一定有收获，但不付出就没有收获 2017读书 过去一年读的书貌似不少，但是没有做好整理以及没有系统读书 接下来，做好之前读书的整理工作之外，继续阅读，最少保证一个月一本厚书的数量 系统化读书：读一系列或者相关领域的一些书籍学习与技术 重新找回编码感觉：从前端入手 重新学习数据机构和算法 思考以后就业方向：深入学习了解某个方面工作室 下一届成员：技术骨干，领导人才 接下来的主要工作重点:开发，培训，引领 做东西，培养新人，引领矿大的技术水平，扩展到全国 写于2017.01.03 第二次读第一次写，觉得自己很厉害，写了那么多，现在再来看，这份总结写得根本没有深入，都是比较空的东西，总结来说没有‘干货’。可能还没认真剖析自己的心吧]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[Linux下部署开源论坛Nodebb]]></title>
      <url>%2F2017%2F01%2F01%2FLinux%E4%B8%8B%E9%83%A8%E7%BD%B2%E5%BC%80%E6%BA%90%E8%AE%BA%E5%9D%9BNodebb%2F</url>
      <content type="text"><![CDATA[工作室内部论坛FlyingForum 为什么使用nodebb 工作室需要一个论坛，交流平台作为QQ群的补充，以及需要一个收集反馈的地方等。 之前想使用原来的discuz，通过模板开发之后再重新推广。但开发失败 暑假接触到开源软件的概念，并在自己的服务器上部署了一两个开源服务:Ghost，nodebb等。 nodebb好看以及响应式设计，移动友好性等 准备 安装Node参照肖神的安装方法，使用包管理器安装：Nodejs官方包管理器安装方法 少了很多配置，能否安装成功全看网速了（学校的校内网对国外的网速限制特别厉害）附上肖神博客 安装Nginx为了使用最新版的Nginx，参照[官方的下载安装教程] (http://nginx.org/en/linux_packages.html#stable) 找到相应的系统版本下载就行 安装Git root下yum安装1yum install git 安装redis3.2.6 原本考虑使用mongodb的，但下载速度太慢、也比较大200+M及莫名失败，所以选择了redis，附上mongodb”centos”官方安装教程 下载Redis参考官方下载教程 我实在受不了学校的下载速度，所以是先下载到本地，然后通过‘FileZilla’上传到服务器源代码只有不到2MB！ 设置redis CentOS 7 上安装 Redis 服务器 centos6安装redis 预想到学校的网速问题，在使用这个方法之前，尝试过使用中科大镜像的EPEL。使用yum install redis来安装redis，这样安装真的少了很多手动配置，方便很多。但是中科大centos6的EPEL很久没更新了（最近更新在2010年左右）,导致Redis版本太低，nodebb启动失败，最后采用了上述手动安装的方法 开始安装Nodebb1. 下载Nodebb到相应的目录git clone https://github.com/NodeBB/NodeBB.git 2. 参照官方教程安装NodeBB 如果npm install 速度比较慢的话，可以使用淘宝的国内镜像npm install --registry=https://registry.npm.taobao.org1234//安装依赖包npm install//配置nodebb 管理员，数据库等./nodebb setup 3. 安装完成后，启动NodeBB在nodebb的根目录下终端执行 ./nodebb start或者node app 前者是只要服务器不关机就可以一直后台运行 后者必须保持终端打开状态，终端一断开或者一按‘CTRL+C’,nodebb就会停止，而且后者会显示启动状态及启动失败问题 运行成功后，可以通过你设置的端口号来访问了，在nodebb根目录‘config.js’文件修改 本地 http://localhost:你的端口号（默认4567） 如果是服务器没有图形界面可以使用 curl i localhost:4567 来检验nodebb是否启动成功 外网访问 http://你的Ip地址:端口（默认4567）这个前提是：你要开放相应的端口 4. 设置nginx参照Nodebb官方Nginx配置 设置nginx的目的是只开放80端口，不用开放所有端口，就可以访问一个服务器里的多个网站，更方便和更安全更多资料,Nginx相关。请百度“Nginx” 或者看工作室wiki 问题解决 SElinux导致Nginx转发失败做完上述工作后，根据我在自己的腾讯云服务器配置nodebb的经验，是可以通过域名访问的 http://forum.flyingstudio.online/ ，但这次出现了“502”错误。 刚开始还以为Nginx配置错误，又重复弄了几次：配置文件名字 *.conf，默认配置文件中是否 include 了配置文件夹，配置文件的内容等 最后只好百度关键词“502” “nodebb 启动” “nodebb 502”等。，找到了读取nginx日志的命令：sudo tail /var/log/nginx/error.log 在日志中发现了原因：这是部分关键字“failed (13: Permission denied)” 百度了之后发现是：SeLinux设置问题。搜到的结果 然后我尝试了 setenforce 0 临时设置Selinux为Permissive,域名访问nodebb后，发现没有出现，所以问题解决成功 为了安全考虑，我又把selinux设置为“Enforcing”，想着能不能只开放一个端口即nodebb使用的端口（默认4567），想起安装mongodb曾经提到过selinux在里面找到: If SELinux is in enforcing mode, enable access to the relevant ports that the MongoDB deployment will use (e.g. 27017). See Default MongoDB Port for more information on MongoDB’s default ports. For default settings, this can be accomplished by runningsemanage port -a -t mongod_port_t -p tcp 27017 仿照搜到的教程selinux教程里Apache的解决方法 可以看出 SELinux 根据三种不同情况分别给出了对应的解决方法。在这里，第一种情况是我们想要的，于是按照其建议输入：semanage port -a -t http_port_t -p tcp 888之后再次启动 Apache 服务就不会有问题了。这里又可以见到 semanage 这个 SELinux 管理配置工具。它第一个选项代表要更改的类型，然后紧跟所要进行操作。 最后写了这个命令:semanage port -a -t http_port_t -p tcp 4567，nodebb能通过域名访问了 期间出现了没有找到”semanage”问题，找到的解决方案有： https://www.cyberciti.biz/faq/redhat-install-semanage-selinux-command-rpm/ http://sharadchhetri.com/2014/10/07/semanage-command-found-centos-7-rhel-7/ 百度到的相关Selinux资料： selinux入门Centos看Selinux状态 nodebb插件安装因为方便用户登录，使用了第三方登录插件和安全插件(防垃圾帖子和机器注册) 直接在后台按照 在nodebb根目录下 npm install &lt;你需要的插件&gt; 相关插件可以在npm，GitHub上寻找，也可以在nodebb插件市场上找 将来可能出现的问题 这次是这几年来，工作室第一次使用Linux服务器，从技术上，人员上是个挑战。 安全问题工作室防服务器是学校的虚拟机，是对外，为用户服务的,Linux服务器如何管理，如何保证安全是一个问题。现在https越来越普遍，工作室也应该尽快进入https阶段了 性能问题这个服务器配置不太好，将来很有可能出现性能瓶颈，如何和网络中心协商升级服务器 后期维护问题这个nodebb采用的nodeJS+redis技术，后面的人才培养，进行二次开发，也是个挑战 链接收集：工作室：工作室内部论坛FlyingForum工作室wikiNode相关：Nodejs官方包管理器安装方法Nginx相关：[Nginx下载安装教程] (http://nginx.org/en/linux_packages.html#stable)MongoDB：mongodb”centos”官方安装教程Redis相关：Redis官方下载CentOS 7 上安装 Redis 服务器centos6安装redisNodeBB相关：官方安装教程Nodebb官方Nginx配置SELinux相关：selinux入门Centos看Selinux状态]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[点石成金读书笔记]]></title>
      <url>%2F2016%2F12%2F20%2F%E7%82%B9%E7%9F%B3%E6%88%90%E9%87%91%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0%2F</url>
      <content type="text"><![CDATA[背景: 工作室买了第三版《点石成金》点石成金3e 豆瓣链接 花了一周时间看了《点石成金》第二版和第三版，回顾一下学到了什么 以前没写过电子档的读书笔记，这是第一次写，所以尝试一下。 书的内容 主要讲了网站的可用性问题: 什么是可用性，如何增强Web的可用性，设计Web时的一些注意事项和方法论 让一个有着能力和经验的人(甚至低于平均水平)能弄明白如何使用它(这说明它是课学习的)去完成某个任务(有效的)，而且不会遇到不必要的麻烦(高效的) 本书的核心原则就是：别让我思考, 还有其他两个原则： 点击多少次都没关系，只要每次点击都是无须思考，明确无误的选择 去掉每个页面上一半的文字，然后把剩下的文字再去掉一半 就是减少用户在使用Web时的学习成本和心理负担，主要目的是：在信息爆照，Web应用爆炸的今天，让用户快速了解你的Web 3.介绍了简易可用性测试,并且给了一些例子,参考下图 书的结构 书主要分四部分： 1. 指导原则 2. 必须处理的几个方面 3. 确定你没有做错的几件事情 4. 大方面和外界的影响 1. 指导原则 说明了日常用户的Web使用习惯:用户总是扫描网页，总是应付而已，满意即可，能够用自己想要的功能就行，不会思考背后的原理等 在此基础上，设计Web时要建立有效的视觉层次：突出有用信息，有逻辑，方便用户扫描的网页 更重要的是：建立不言而喻，自解释的网页, 让用户低成本试错 2. 必须处理的几个方面 从导航设计，主页设计两方面入手，说了些设计细节和方法论 导航的用途：网站有什么，告诉用户如何使用网站，给用户对网站的信心，下面是导航设计时的考虑的问题 容易返回主页，回到原点（降低试错成本）、 标明用户现在在哪，不迷失方向(类似现实生活的标识) 页面风格应该一致，不论该页面的层次在哪里(一个网站有多层次的网页结构) Web主页: 功能是传达信息，整体形象，是大家的共有资源，要好好利用，但要避免”共有区域的悲剧” 下面是具体注意事项： 使用适合的空间来变现主张，不过大或者过小 使用好的口号：长度适中，言之有物，个性生动 一定要测试！！ 更多内容：请看书！ 3. 确定你没有做错的几件事情 主要说了可用性测试的意义，如何进行可用性测试以及进行可用性测试的注意事项 具体如何操作见前图，完整思维导图看文件：我的思维导图云盘链接 4. 大方面和外界的影响 总结说明了可用性和移动Web应用的特性，介绍了一些可访问性的知识，并普及了其他相关知识 移动Web需要的特性: 让人快乐，可学习，可记忆 可用性是个礼貌：每个人对于一个网站有一个好感存储度 可访问性：让更多人使用方便：残障人士，年老用户，正常用户等 思维导图点石成金2e 点石成金3e 读书感悟 大概感受：有很多方法论的东西，但对于我这个没有做过设计的人来说，比较虚，没有顿悟。 这次阅读可以说是:普及一些设计常识，比较琐碎，这本书不能很好的构建完整的知识体系，所以这本书只能是个知识补充读物。 但是其中的简易可用性测试，给了我很大启发和感悟:一个简易可用性测试的成本并不高，但是效果特别好。这本书也让我从内容，排版上，设计上加深了对网页的理解。 这是思考列表，部分是书中摘抄 用户是不确定的，用户的使用习惯也是多样的，如果不深入用户，不理解用户，无论多好的设计都是空谈。测试必须要有，不了测试的用例多少 使用习惯用法，降低用户的学习曲线，必不可少的创新要坚持，做好测试和指示说明 给了一份很好的访问web时的问题清单 这是什么网站 网站上有些什么 我能在这里做什么 为什么我应该在这里，而不是别的什么地方 可用性是个礼貌，这说明了制作者对这个网站是否用心，就是让用户更加方便使用网站提供的服务 设计就是处理各种约束和妥协。要在这个约束中创新，符合用户习惯，保证用户的可用性 用户总是满意即可，只是应付而已。意思是:能够方便使用他们需要的功能就行了，而且很少去发现更方便的方法，发现了也很少会去改进(习惯)。但在开发时必须不将就，把最方便，最实用的功能摆在用户面前 这本书页数在130以内，如果快速阅读的，可以2h搞定，这本书我大概花了5天时间看了2版，有些收获，但是感官不强，下一个看About Face4 交互设计精粹,看看能不能对设计有更进一步的理解 版本比较 《点石成金2e》(2006)与《点石成金3e》(2014)比较 第三版(2014)比第二版(2006)的书多了移动web应用的相关知识， 第三版删减了很多已经过时的东西：比如对于Css和Javascript的看法 个人感官:新版的书比旧版本的排版好很多，而且看的时候感觉也好很多 但是其中一些核心内容没有多大变化:比如导航设计，主页设计以及可用性测试的相关内容总结: 虽然经典的东西很少变，相对于文学作品来说，这种时效性较强的方法论书籍最好看最新版的，因为知识，技术总是在更新。要持续学习。手机思维导图App比较 Mindly 思维导图 之前都是手写做笔记，这次尝试一下使用线上做笔记，考虑到电脑携带不方便，所以选择了手机思维导图的App来做笔记，使用了以后再也不想使用手机思维导图App了，没有感觉。。 ## Mindly 个人感觉比较酷炫 先看App截图 使用感受 无限添加节点，节点可转，刚开始觉得很酷炫，然后发现这对自己的思维扩散没有帮助（免费版只有100个…） 可添加链接，觉得很好。App内也可以打开链接，也不错，虽然不能在浏览器打开。可是：导出PDF链接就不能用了！！ 有笔记，但是导出PDF后，比较难找。。什么鬼。。 最后发现免费版的Mindly就是鸡肋：不能导出图片（只能导出Mindly文件和PDF），最多建立3个思维导图（每个不超过100个）， 添加图片节点：图片质量下降，而且不能看原图 思维导图 中规中矩，有条理App截图 使用感受 在一个大图里建思维导图，可以随时拖动，回看，这很不错 建立分支也很容易，比较符合普通的思维导图 好像是个人开发：App不太细致 添加分支后的编辑，删除功能特别不好用，严重影响使用感受，和思维流畅性，必须等待菜单栏出来，才能进行下一步 可以导出图片，可是到处后的图片有些失真，而且放大后，看不清楚 总结 Android平台上思维导图App比较少（用的比较少，勿喷），发现一款“思维简图”的使用方法是我比较喜欢的：就是通过‘!’的多少来判断思维层级，类似Markdown，只是使用起来比较死板，最后弃用（其实就是，搞不清楚如何使用以及不好看） 手机思维导图App不适合做知识整理，使用不太方便，容易打断自己的连续状态，不能专注看书。电脑版的思维导图软件使用的比较少，不发表评论 虽然线上思维导图不用丢失，也比较整洁，好看。但是个人认为：如果思维导图是为了扩散思维的话，最好是手画，随意画，比较灵活而且沉浸感比较强。如果是笔记记录，整理的话，使用思维导图软件的话会更加清晰整洁，也更加便携，方便随时查找]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[杂记2016-11-24]]></title>
      <url>%2F2016%2F11%2F24%2F%E6%9D%82%E8%AE%B0%2F</url>
      <content type="text"><![CDATA[记录近况 断更了，原本准备一天一篇博客 这几天忙着考试 没有写博客的习惯 一个字懒 学习算法，正整理笔记：主要是为了应试 有点一团糟，迷茫，正在调整，需要外力介入 需要记录灵感，重新换新自己的敏感度 流水账，要写几个技术贴，但是自己还没怎么学技术。&gt; 这几天在坚持FCC，卸载了QQ微信虽然失败了,但要坚持下去。。。]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[编译笔记]]></title>
      <url>%2F2016%2F11%2F21%2F%E7%BC%96%E8%AF%91%E7%AC%94%E8%AE%B0%2F</url>
      <content type="text"><![CDATA[编译课笔记，个人总结 明天哟啊考试了，今天做个总结笔记 但脑袋还是一片空白]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[复习编译]]></title>
      <url>%2F2016%2F11%2F20%2F%E5%A4%8D%E4%B9%A0%E7%BC%96%E8%AF%91%2F</url>
      <content type="text"><![CDATA[开始复习编译了记流水账了 早上8点醒，玩手机到10点，学了不到1h，中午吃完饭后，学了30m，下午14点醒，玩手机到15点，听大神讲课，随意刷ppt1h左右，认真学了1h，吃完晚饭后，再认真学了1h,接着从20点到现在一直在码字，而且期间还花了时间来闲逛。 首先表扬自己终于开始学习了，有种感悟：万事开头难。开始了之后，就没有感觉了。加油继续坚持下去。需要一个cue，引子，然后再坚持，给自己反馈。 反思 其实有效的学习时间不超过3.5h,但是我感觉一天都花时间在学习上了，这说明我的效率不高，而且没有获得心流状态 没有做好总结，笔记，不容易回想和沉淀 自控不强，虽然把社交软件卸载了（QQ，微信，微博），但还是不自觉的刷手机（简书，掘金，知乎等） 使用电脑时，只要一联网，就被其他因素干扰，打断了自己 依然有点迷茫。 焦躁下周有两门考试，都是比较重要的，而且还没怎么听课，编译已经看了一半，算法还没开始。。。有些焦躁，有些害怕，这种感觉不好受。一个字描述自己的以前：作；一个字描述自己的现在：急；一个字描述自己的为了：茫然。 回忆看到了以前同学的照片，突然想流泪，自己结的果，自己吃。井底之蛙的自己却总是目空一切。自勉！ 总是有那么多事情做，却总是不开始行动 脑袋一片空白，没把握到写博客的重点。]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[First Blog]]></title>
      <url>%2F2016%2F11%2F19%2FBlog%2F</url>
      <content type="text"><![CDATA[2016-11第一篇博客从暑假开始部署博客，从当初ghost到现在的Hexo都是玩的性质比较多，但是并没有真正去静下心来去写一篇博客，而且写的内容都是无营养的，没有促进自己的进步，也没有发现自己 从今年6月份开始一直到现在，我都没有静下心来去学习，去钻研某个东西，很多都是浅尝而止，其实我十分羡慕、渴望匠心。 这段时间，我尝试了Hadoop，机器学习，服务器部署，开源软件使用，更多的时候是在耍手机，茫然的荒废时间。除此之外，也没有处理好工作，学习，生活的关系。总是以拖延为借口，到把自己弄得很难受。总而言之，浮躁的自己，骄傲的自己，却有卑微的心与行动。 更重要的是，有着写代码的心，却无法静心写代码，所以我准备跟着FreeCodeCamp来学习前段，Web开发相关知识，重拾自己代码的感觉。并且使用博客来督促自己，总结自己，以输出来增加输入，为自己加油。当然，还是要以学习为重。 总结这可以说是我在Hexo的第一篇博客，不知道写什么，大晚上，疲惫的自己脑袋一片空白。胡言乱语了一通，还是要给自己灌下鸡汤，打下鸡血，共勉。 为什么使用Hexo而不是Ghost？方便以后转存与同步，我本机有文件，github上也有文件，不容易出现问题ghost更多的是作为熟悉服务器使用的路径吧有点混乱， == 早点休息 ==]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[暑假期间]]></title>
      <url>%2F2016%2F09%2F01%2F%E6%9A%91%E5%81%87%E6%9C%9F%E9%97%B4%2F</url>
      <content type="text"><![CDATA[暑假期间流水账，有价值的东西不多 7.28-7.29 配置Hadoop7.28配置Hadoop我先在windows下配置Hadoop，然而cygwin不会玩然后转战VM中ubuntu来配置Hadoop，还没弄好，明天继续弄一下配置Hadoop是为了弄Mahout。任重而道远！！ 7.29继续配置终于配置成功，配置的时候，难点是环境变量配置，有点繁琐，枯燥。。好枯燥哦。。还有就是今天我遇到的问题是：配置环境变量出错导致系统进入不了。但成功解决了参考教程（Ubuntu配置Hadoop）：http://www.powerxing.com/install-hadoop/也弄好了Mahout，但还不会用。Hadoop的使用还有很长的路去学习，继续加油下一步：尝试使用Eclipse来开发，使用Mahout的函数http://www.powerxing.com/hadoop-build-project-using-eclipse/ 7.30 看了部分CSAPP 使用Mahout主体部分，Guava，slf4j，Apache commons—math(Mahout依赖的包)等包来做了个简易推荐系统，实现了简易推荐 找了一些推荐系统的资料、书等，需要整理一下，可以上YOUTUBE来找一下Mahout教程 学习了一些Android知识，XML和Java之间联系，Java解析XML（ID，层次等），XML存储数据 7.31 主要看了Coursera中Machine Learning 继续CSAPP 代码（项目，学习） 8月份要做的知识方面 Coursera上课程，2~3个 4~5本书 技术，工具方面 GIT 线上笔记，MarkDown 整理 个人方面 锻炼 8.1早上看了CSAPP，并实现了程序优化的代码，有些理解了。但暴露出了自己敲代码还不太熟练，C/C++不太熟，VS还不太用 下午看视频 代码（没那么简单）根据Coursera的教程一步步来，熟悉了matlab、octave的使用，对线性回归有更深的理解，但是我编码从15点开始到21点结束，期间2h休息。花费时间过多，其实难度不太大，只是对式子的不熟悉和对概念不熟悉，导致找不出来错误。 下一步回顾一些视频特别是Vectorization和整理下知识点，实现剩下的算法，或使用其他方法（向量化）继续学习 总结8.11最近在做些什么（7.29-8.11）主要学习coursra上的Machine-Learning的课程，一天一周课，大概每天完成编程作业，期间还看了一点CSAPP。这些天大多数时间（8h）都在学习ML，但有时候还是会分神 总结时间是硬伤 接下来 GIT 代码 复习 书]]></content>
    </entry>

    
  
  
</search>
